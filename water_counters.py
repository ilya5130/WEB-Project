import logging
import telebot
import sqlite3
import csv
from io import StringIO


# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot("7095480877:AAHet48wIKiuecFPkaTTL8FcabqJ5x_3bEY")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤
water_counters = {'hot': 0, 'cold': 0}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—É—Ä—Å–æ—Ä–∞
conn = sqlite3.connect('water_readings.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS apartments
                  (id INTEGER PRIMARY KEY, number INTEGER)''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS water_readings
                  (id INTEGER PRIMARY KEY, apartment_id INTEGER, hot_water INTEGER, cold_water INTEGER,
                   FOREIGN KEY(apartment_id) REFERENCES apartments(id))''')

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
admin_ids = [1680017325, 780925405]

TARIFF_COLD_WATER = 41.41
TARIFF_HOT_WATER = 31.24

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
def is_admin(user_id):
    return user_id in admin_ids

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_user –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['delete_user'])
def delete_user(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        user_to_delete = message.text.split()[1] if len(message.text.split()) > 1 else ''
        if user_to_delete:
            try:
                user_to_delete = int(user_to_delete)
                with sqlite3.connect('water_readings.db') as conn:
                    cursor = conn.cursor()
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã apartments
                    cursor.execute("DELETE FROM apartments WHERE id=?", (user_to_delete,))
                    conn.commit()
                    bot.reply_to(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_to_delete} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            except ValueError:
                bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            except sqlite3.Error as e:
                bot.reply_to(message, f"ü§î –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        else:
            bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    else:
        bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è CSV-—Ñ–∞–π–ª–∞ —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤
def create_counters_report():
    with sqlite3.connect('water_readings.db') as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM water_readings")
        readings = cursor.fetchall()

        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output = StringIO()
        writer = csv.writer(output, delimiter=',', quotechar='"', quoting=csv.QUOTE_MINIMAL)

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤
        writer.writerow(['ID', 'Apartment ID', 'Hot Water', 'Cold Water'])

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in readings:
            writer.writerow(row)

        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
        output.seek(0)

        return output

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /send_report –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['send_report'])
def send_report(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        report_file = create_counters_report()
        bot.send_document(message.chat.id, ('water_counters_report.csv', report_file.getvalue()))
        report_file.close()
    else:
        bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
@bot.message_handler(commands=['admin'])
def admin_panel(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üé´! –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:\n"
                              "/reset_counters - —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ üîÑ\n"
                              "/delete_user <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> - —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID üÜî\n"
                              "/send_report - –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ üìÑ\n"
                              "/get_users - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üìÉ\n")
    else:
        bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_counters –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['reset_counters'])
def reset_counters(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        water_counters['hot'] = 0
        water_counters['cold'] = 0
        bot.reply_to(message, "–ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã. üîÑ")
    else:
        bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /get_users –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@bot.message_handler(commands=['get_users'])
def get_users(message):
    user_id = message.from_user.id
    if is_admin(user_id):
        with sqlite3.connect('water_readings.db') as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM apartments")
            users = cursor.fetchall()
            reply_message = "üìÉ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –∫–≤–∞—Ä—Ç–∏—Ä:\n"
            for user in users:
                reply_message += f"ID: {user[0]}, –ù–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã: {user[1]}\n"
            bot.reply_to(message, reply_message)
    else:
        bot.reply_to(message, "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç!üëãüèª –Ø –±–æ—Ç ü§ñ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã; '
                          '–û—Ç–ø—Ä–∞–≤—å /help, ‚úè —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
    with open('start.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, 'üö© –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                          '1Ô∏è‚É£ /status - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤\n'
                          '2Ô∏è‚É£ /register <–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã> - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É\n'
                          '3Ô∏è‚É£ /help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n'
                          '4Ô∏è‚É£ /pay - –æ–ø–ª–∞—Ç–∞ –∑–∞ –º–µ—Å—è—Ü\n'
                          '5Ô∏è‚É£ /send_data <—Ö–æ–ª–æ–¥–Ω–∞—è> <–≥–æ—Ä—è—á–∞—è> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è\n')


@bot.message_handler(commands=['send_data'])
def send_data(message):
    try:
        command_parts = message.text.split()
        cold_water_value = float(command_parts[1])
        hot_water_value = float(command_parts[2])
        user_id = message.from_user.id

        with sqlite3.connect('water_readings.db') as conn:
            cursor = conn.cursor()
            apartment_id = get_registered_apartment_id(cursor, user_id)
            if apartment_id:
                cursor.execute("INSERT INTO water_readings (apartment_id, cold_water, hot_water) VALUES (?, ?, ?)", (apartment_id, cold_water_value, hot_water_value))
                conn.commit()
                water_counters['hot'] = hot_water_value
                water_counters['cold'] = cold_water_value
                bot.reply_to(message, f"‚úî –ü–æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã: —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ - {cold_water_value}, –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ - {hot_water_value}")
            else:
                bot.reply_to(message, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register')
    except (IndexError, ValueError):
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /send_data <–ø–æ–∫–∞–∑–∞–Ω–∏—è —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã> <–ø–æ–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã>')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@bot.message_handler(commands=['status'])
def status(message):
    bot.reply_to(message, f'üîÑ –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:\n'
                          f'‚ô® –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: {water_counters["hot"]}\n'
                          f'‚ùÑ –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: {water_counters["cold"]}')

@bot.message_handler(commands=['pay'])
def pay_water(message):
    user_id = message.from_user.id
    with sqlite3.connect('water_readings.db') as conn:
        cursor = conn.cursor()
        apartment_id = get_registered_apartment_id(cursor, user_id)
        if apartment_id:
            cursor.execute('SELECT cold_water, hot_water FROM water_readings WHERE apartment_id=? ORDER BY id DESC LIMIT 2', (apartment_id,))
            readings = cursor.fetchall()
            if len(readings) == 2:
                current_month, last_month = readings
                cold_water_difference = current_month[0] - last_month[0]
                hot_water_difference = current_month[1] - last_month[1]

                cold_water_cost = cold_water_difference * TARIFF_COLD_WATER
                hot_water_cost = hot_water_difference * TARIFF_HOT_WATER
                total_cost = cold_water_cost + hot_water_cost

                bot.reply_to(message, f'–ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ - {last_month[0]}, –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ - {last_month[1]}\n'
                             f'–ü–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ - {current_month[0]}, –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ - {current_month[1]}\n'
                             f'–†–∞–∑–Ω–∏—Ü–∞: —Ö–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞ - {cold_water_difference}, –≥–æ—Ä—è—á–∞—è –≤–æ–¥–∞ - {hot_water_difference}\n'
                             f'–¢–∞—Ä–∏—Ñ –∑–∞ —Ö–æ–ª–æ–¥–Ω—É—é –≤–æ–¥—É: {TARIFF_COLD_WATER} —Ä—É–±.\n'
                             f'–¢–∞—Ä–∏—Ñ –∑–∞ –≥–æ—Ä—è—á—É—é –≤–æ–¥—É: {TARIFF_HOT_WATER} —Ä—É–±.\n'
                             f'–°—Ç–æ–∏–º–æ—Å—Ç—å —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã: {cold_water_cost} —Ä—É–±.\n'
                             f'–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã: {hot_water_cost} —Ä—É–±.\n'
                             f'**–û–±—â–∞—è —Å—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {total_cost} —Ä—É–±.**\n')
            else:
                bot.reply_to(message, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è –∑–∞ –æ–±–∞ –º–µ—Å—è—Ü–∞.")
        else:
            bot.reply_to(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register")

def get_registered_apartment_id(cursor, user_id):
    cursor.execute("SELECT number FROM apartments WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@bot.message_handler(commands=['register'])
def register_apartment(message):
    try:
        user_id = message.from_user.id
        try:
            apartment_number = int(message.text.split()[1])
            with sqlite3.connect('water_readings.db') as conn:
                cursor = conn.cursor()
                registered_apartment = get_registered_apartment_id(cursor, user_id)
                if registered_apartment:
                    bot.reply_to(message, f'‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É {registered_apartment}!')
                    bot.reply_to(message,
                                 '/send_data <—Ö–æ–ª–æ–¥–Ω–∞—è> <–≥–æ—Ä—è—á–∞—è> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è üìã‚ô®‚ùÑ\n')
                else:
                    cursor.execute("INSERT INTO apartments (id, number) VALUES (?, ?)", (user_id, apartment_number))
                    conn.commit()
                    bot.reply_to(message, f'üìë –ö–≤–∞—Ä—Ç–∏—Ä–∞ {apartment_number} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!')
                    bot.reply_to(message,
                              '/send_data <—Ö–æ–ª–æ–¥–Ω–∞—è> <–≥–æ—Ä—è—á–∞—è> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏—è üìã‚ùÑ‚ô®\n')
        except ValueError:
            bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /register <–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã>')
    except IndexError:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /register <–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã>')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda message: True)
def unknown(message):
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üò•")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()
