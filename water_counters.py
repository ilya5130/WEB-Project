import logging
import telebot
import sqlite3

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–∫–∞—Ö
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ —Å –ø–æ–º–æ—â—å—é —Ç–æ–∫–µ–Ω–∞
bot = telebot.TeleBot("7095480877:AAHet48wIKiuecFPkaTTL8FcabqJ5x_3bEY")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤
water_counters = {'hot': 0, 'cold': 0}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –∫—É—Ä—Å–æ—Ä–∞
conn = sqlite3.connect('water_readings.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∫–≤–∞—Ä—Ç–∏—Ä, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS apartments
                  (id INTEGER PRIMARY KEY, number INTEGER)''')

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
cursor.execute('''CREATE TABLE IF NOT EXISTS water_readings
                  (id INTEGER PRIMARY KEY, apartment_id INTEGER, hot_water INTEGER, cold_water INTEGER,
                   FOREIGN KEY(apartment_id) REFERENCES apartments(id))''')

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, '–ü—Ä–∏–≤–µ—Ç!üëãüèª –Ø –±–æ—Ç ü§ñ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–æ–≤ –≤–æ–¥—ã; '
                          '–û—Ç–ø—Ä–∞–≤—å /help, ‚úè —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.')
    with open('start.jpg', 'rb') as photo:
        bot.send_photo(message.chat.id, photo)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help_command(message):
    bot.reply_to(message, 'üö© –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                          '1Ô∏è‚É£ /status - –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤\n'
                          '2Ô∏è‚É£ /register <–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã> - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É\n'
                          '3Ô∏è‚É£ /help - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥\n')


@bot.message_handler(commands=['hot'])
def hot_water(message):
    try:
        value = float(message.text.split()[1])
        user_id = message.from_user.id
        with sqlite3.connect('water_readings.db') as conn:
            cursor = conn.cursor()
            apartment_id = get_registered_apartment_id(cursor, user_id)
            if apartment_id:
                cursor.execute("INSERT INTO water_readings (apartment_id, hot_water) VALUES (?, ?)", (apartment_id, value))
                value = float(message.text.split()[1])
                water_counters['hot'] = value
                conn.commit()
                bot.reply_to(message, f'‚úî –ü–æ–∫–∞–∑–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {value}')
            else:
                bot.reply_to(message, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register')
    except (IndexError, ValueError):
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /hot <–ø–æ–∫–∞–∑–∞–Ω–∏–µ> ‚ô®')


@bot.message_handler(commands=['cold'])
def cold_water(message):
    try:
        value = float(message.text.split()[1])
        user_id = message.from_user.id
        with sqlite3.connect('water_readings.db') as conn:
            cursor = conn.cursor()
            apartment_id = get_registered_apartment_id(cursor, user_id)
            if apartment_id:
                cursor.execute("INSERT INTO water_readings (apartment_id, cold_water) VALUES (?, ?)", (apartment_id, value))
                value = float(message.text.split()[1])
                water_counters['cold'] = value
                conn.commit()
                bot.reply_to(message, f'‚úî –ü–æ–∫–∞–∑–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {value}')
            else:
                bot.reply_to(message, '‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –∫–≤–∞—Ä—Ç–∏—Ä—É —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /register')
    except (IndexError, ValueError):
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /cold <–ø–æ–∫–∞–∑–∞–Ω–∏–µ> ‚ùÑ')



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status
@bot.message_handler(commands=['status'])
def status(message):
    bot.reply_to(message, f'üîÑ –¢–µ–∫—É—â–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤:\n'
                          f'‚ô® –ì–æ—Ä—è—á–∞—è –≤–æ–¥–∞: {water_counters["hot"]}\n'
                          f'‚ùÑ –•–æ–ª–æ–¥–Ω–∞—è –≤–æ–¥–∞: {water_counters["cold"]}')

def get_registered_apartment_id(cursor, user_id):
    cursor.execute("SELECT number FROM apartments WHERE id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register
@bot.message_handler(commands=['register'])
def register_apartment(message):
    try:
        user_id = message.from_user.id
        apartment_number = message.text.split()[1]
        with sqlite3.connect('water_readings.db') as conn:
            cursor = conn.cursor()
            registered_apartment = get_registered_apartment_id(cursor, user_id)
            if registered_apartment:
                bot.reply_to(message, f'‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –∫–≤–∞—Ä—Ç–∏—Ä—É {registered_apartment}!')
                bot.reply_to(message,
                             '/hot <–ø–æ–∫–∞–∑–∞–Ω–∏–µ> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã üìã‚ô®\n'
                             '/cold <–ø–æ–∫–∞–∑–∞–Ω–∏–µ> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã üìã‚ùÑ\n')
            else:
                cursor.execute("INSERT INTO apartments (id, number) VALUES (?, ?)", (user_id, apartment_number))
                conn.commit()
                bot.reply_to(message, f'üìë –ö–≤–∞—Ä—Ç–∏—Ä–∞ {apartment_number} —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!')
                bot.reply_to(message,
                          '/hot <–ø–æ–∫–∞–∑–∞–Ω–∏–µ> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã üìã‚ô®\n'
                          '/cold <–ø–æ–∫–∞–∑–∞–Ω–∏–µ> - –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫–∞–∑–∞–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Ö–æ–ª–æ–¥–Ω–æ–π –≤–æ–¥—ã üìã‚ùÑ\n')
    except IndexError:
        bot.reply_to(message, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /register <–Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã>')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
@bot.message_handler(func=lambda message: True)
def unknown(message):
    bot.reply_to(message, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É üò•")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling()
